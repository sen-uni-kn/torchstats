#  Copyright (c) 2024. David Boetius
#  Licensed under the MIT License
import torch
import pytest

from torchstats import CategoricalOneHot


# Init tests are in test_categorical


@pytest.mark.parametrize(
    "probs,event,expected_probability",
    (
        ([0.5, 0.5], ([0.0, 0.0], [1.0, 1.0]), 1.0),
        ([0.5, 0.5], ([1.0, 0.0], [1.0, 0.0]), 0.5),
        ([0.5, 0.5], ([0.0, 1.0], [0.0, 1.0]), 0.5),
        ([0.5, 0.5], ([0.0, 0.0], [1.0, 0.0]), 0.5),
        ([0.5, 0.5], ([0.0, 0.0], [0.0, 1.0]), 0.5),
        ([0.5, 0.5], ([0.0, 1.0], [1.0, 1.0]), 0.5),
        ([0.5, 0.5], ([1.0, 1.0], [1.0, 1.0]), 0.0),
        ([0.5, 0.5], ([0.1, 0.0], [1.0, 1.0]), 0.5),
        ([0.5, 0.5], ([0.0, 0.5], [0.5, 1.0]), 0.5),
        (  # batched version of the above
            [0.5, 0.5],
            (
                [
                    [0.0, 0.0],
                    [1.0, 0.0],
                    [0.0, 1.0],
                    [0.0, 0.0],
                    [0.0, 0.0],
                    [0.0, 1.0],
                    [1.0, 1.0],
                    [0.1, 0.0],
                    [0.0, 0.5],
                ],
                [
                    [1.0, 1.0],
                    [1.0, 0.0],
                    [0.0, 1.0],
                    [1.0, 0.0],
                    [0.0, 1.0],
                    [1.0, 1.0],
                    [1.0, 1.0],
                    [1.0, 1.0],
                    [0.5, 1.0],
                ],
            ),
            [1.0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.0, 0.5, 0.5],
        ),
        ([0.2, 0.3, 0.4, 0.1], ([0.0, 0.0, 0.0, 0.0], [1.0, 1.0, 1.0, 1.0]), 1.0),
        ([0.2, 0.3, 0.4, 0.1], ([1.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0]), 0.2),
        ([0.2, 0.3, 0.4, 0.1], ([0.0, 1.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0]), 0.3),
        ([0.2, 0.3, 0.4, 0.1], ([0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 1.0, 0.0]), 0.4),
        ([0.2, 0.3, 0.4, 0.1], ([0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 1.0]), 0.1),
        ([0.2, 0.3, 0.4, 0.1], ([0.0, 0.0, 0.0, 0.0], [1.0, 1.0, 0.0, 0.0]), 0.5),
        ([0.2, 0.3, 0.4, 0.1], ([0.0, 0.0, 0.0, 0.0], [1.0, 1.0, 1.0, 0.0]), 0.9),
        ([0.2, 0.3, 0.4, 0.1], ([0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 1.0]), 0.4),
        ([0.2, 0.3, 0.4, 0.1], ([1.0, 1.0, 0.0, 0.0], [1.0, 1.0, 0.0, 1.0]), 0.0),
        (
            [0.2, 0.3, 0.4, 0.1],
            (
                [
                    [0.0, 0.0, 0.0, 0.0],
                    [1.0, 0.0, 0.0, 0.0],
                    [0.0, 1.0, 0.0, 0.0],
                    [0.0, 0.0, 1.0, 0.0],
                    [0.0, 0.0, 0.0, 1.0],
                    [0.0, 0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0, 0.0],
                    [1.0, 1.0, 0.0, 0.0],
                ],
                [
                    [1.0, 1.0, 1.0, 1.0],
                    [1.0, 0.0, 0.0, 0.0],
                    [0.0, 1.0, 0.0, 0.0],
                    [0.0, 0.0, 1.0, 0.0],
                    [0.0, 0.0, 0.0, 1.0],
                    [1.0, 1.0, 0.0, 0.0],
                    [1.0, 1.0, 1.0, 0.0],
                    [0.0, 1.0, 0.0, 1.0],
                    [1.0, 1.0, 0.0, 1.0],
                ],
            ),
            [1.0, 0.2, 0.3, 0.4, 0.1, 0.5, 0.9, 0.4, 0.0],
        ),
        (
            [0.0, 1.0, 0.0, 0.0, 0.0],
            ([0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 1.0, 1.0, 1.0, 1.0]),
            1.0,
        ),
        (
            [0.0, 1.0, 0.0, 0.0, 0.0],
            ([0.0, 0.0, 0.0, 0.0, 0.0], [1.0, 0.0, 1.0, 1.0, 1.0]),
            0.0,
        ),
        (
            [0.0, 1.0, 0.0, 0.0, 0.0],
            ([0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0, 0.0]),
            0.0,
        ),
        (
            [0.0, 1.0, 0.0, 0.0, 0.0],
            ([0.0, 0.5, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 1.0, 0.0]),
            1.0,
        ),
        (
            [0.0, 1.0, 0.0, 0.0, 0.0],
            (
                [
                    [0.0, 0.0, 0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0, 1.0, 0.0],
                    [0.0, 0.5, 0.0, 0.0, 0.0],
                ],
                [
                    [1.0, 1.0, 1.0, 1.0, 1.0],
                    [1.0, 0.0, 1.0, 1.0, 1.0],
                    [0.0, 0.0, 0.0, 1.0, 0.0],
                    [0.0, 1.0, 0.0, 1.0, 0.0],
                ],
            ),
            [1.0, 0.0, 0.0, 1.0],
        ),
        ([1 / 3, 0.0, 2 / 3], ([0.0, 0.0, 0.0], [1.0, 1.0, 1.0]), 1.0),
        ([1 / 3, 0.0, 2 / 3], ([-1.0, -1.0, -1.0], [2.0, 2.0, 2.0]), 1.0),
        ([1 / 3, 0.0, 2 / 3], ([-1.0, -1.0, -1.0], [0.0, 2.0, 0.0]), 0.0),
        ([1 / 3, 0.0, 2 / 3], ([-1.0, -1.0, -1.0], [0.0, 0.0, 10.0]), 2 / 3),
        ([1 / 3, 0.0, 2 / 3], ([-100.0, 0.0, -0.5], [14.7, 0.1, 0.5]), 1 / 3),
        (
            [1 / 3, 0.0, 2 / 3],
            (
                [
                    [0.0, 0.0, 0.0],
                    [-1.0, -1.0, -1.0],
                    [-1.0, -1.0, -1.0],
                    [-1.0, -1.0, -1.0],
                    [-100.0, 0.0, -0.5],
                ],
                [
                    [1.0, 1.0, 1.0],
                    [2.0, 2.0, 2.0],
                    [0.0, 2.0, 0.0],
                    [0.0, 0.0, 10.0],
                    [14.7, 0.1, 0.5],
                ],
            ),
            [1.0, 1.0, 0.0, 2 / 3, 1 / 3],
        ),
    ),
)
def test_probability(probs, event, expected_probability):
    distribution = CategoricalOneHot(torch.tensor(probs))
    dtype = distribution.dtype
    event = torch.tensor(event[0], dtype=dtype), torch.tensor(event[1], dtype=dtype)
    expected_probability = torch.tensor(expected_probability, dtype=dtype)
    assert torch.allclose(distribution.probability(event), expected_probability)


if __name__ == "__main__":
    pytest.main()
