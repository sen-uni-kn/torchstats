# Copyright (c) 2023 David Boetius
# Licensed under the MIT license
import numpy as np
import torch

from torchstats import Categorical, CategoricalOneHot

import pytest


@pytest.mark.parametrize(
    "probs",
    (
        [0.5, 0.5],
        [0.2, 0.3, 0.4, 0.1],
        [0.1] * 10,
        [0.05, 0.15] * 5,
        [0.0, 1.0, 0.0, 0.0, 0.0],
        [1 / 3, 0.0, 2 / 3],
    ),
)
@pytest.mark.parametrize("distr_class", [Categorical, CategoricalOneHot])
@pytest.mark.parametrize("use_numpy", [True, False])
def test_init(distr_class, probs, use_numpy):
    if use_numpy:
        probs = np.array(probs)
    else:
        probs = torch.tensor(probs)
    distribution = distr_class(probs)
    print(distribution)


@pytest.mark.parametrize(
    "probs,values",
    (
        ([0.5, 0.5], [1.0, 2.0]),
        ([0.5, 0.5], [35.0, 77.1]),
        ([0.2, 0.3, 0.4, 0.1], [-22.0, -11.0, 11.0, 22.0]),
        ([1 / 3, 0.0, 2 / 3], [0.0, 0.25, 0.75]),
    ),
)
@pytest.mark.parametrize("use_numpy", [True, False])
def test_init_with_values(probs, values, use_numpy):
    if use_numpy:
        probs = np.array(probs)
        values = np.array(values)
    else:
        probs = torch.tensor(probs)
        values = torch.tensor(values)
    distribution = Categorical(probs, values)
    print(distribution)


@pytest.mark.parametrize(
    "probs,values,event,expected_probability",
    (
        ([0.5, 0.5], None, ([0.0], [1.0]), 1.0),
        ([0.5, 0.5], None, ([0.0], [0.0]), 0.5),
        ([0.5, 0.5], None, ([1.0], [1.0]), 0.5),
        ([0.5, 0.5], None, ([0.0], [0.99]), 0.5),
        ([0.5, 0.5], None, ([0.5], [1.5]), 0.5),
        (
            [0.5, 0.5],
            None,
            ([[0.0], [0.0], [1.0], [0.0], [0.5]], [[1.0], [0.0], [1.0], [0.99], [1.5]]),
            [1.0, 0.5, 0.5, 0.5, 0.5],
        ),
        ([0.5, 0.5], [1.0, 2.0], ([1.0], [2.0]), 1.0),
        ([0.5, 0.5], [1.0, 2.0], ([1.0], [1.0]), 0.5),
        ([0.5, 0.5], [1.0, 2.0], ([2.0], [2.0]), 0.5),
        ([0.5, 0.5], [1.0, 2.0], ([1.0], [1.99]), 0.5),
        ([0.5, 0.5], [1.0, 2.0], ([1.5], [2.5]), 0.5),
        (
            [0.5, 0.5],
            [1.0, 2.0],
            ([[1.0], [1.0], [2.0], [1.0], [1.5]], [[2.0], [1.0], [2.0], [1.99], [2.5]]),
            [1.0, 0.5, 0.5, 0.5, 0.5],
        ),
        ([0.2, 0.3, 0.4, 0.1], None, ([0.0], [3.0]), 1.0),
        ([0.2, 0.3, 0.4, 0.1], None, ([0.0], [0.0]), 0.2),
        ([0.2, 0.3, 0.4, 0.1], None, ([1.0], [1.0]), 0.3),
        ([0.2, 0.3, 0.4, 0.1], None, ([2.0], [2.0]), 0.4),
        ([0.2, 0.3, 0.4, 0.1], None, ([3.0], [3.0]), 0.1),
        ([0.2, 0.3, 0.4, 0.1], None, ([0.0], [1.0]), 0.5),
        ([0.2, 0.3, 0.4, 0.1], None, ([0.0], [2.0]), 0.9),
        ([0.2, 0.3, 0.4, 0.1], None, ([2.0], [3.0]), 0.5),
        ([0.2, 0.3, 0.4, 0.1], None, ([-1.0], [-0.5]), 0.0),
        ([0.2, 0.3, 0.4, 0.1], None, ([4.0], [100.0]), 0.0),
        (
            [0.2, 0.3, 0.4, 0.1],
            None,
            (
                [[0.0], [0.0], [1.0], [2.0], [3.0], [0.0], [0.0], [2.0], [-1.0], [4.0]],
                [
                    [3.0],
                    [0.0],
                    [1.0],
                    [2.0],
                    [3.0],
                    [1.0],
                    [2.0],
                    [3.0],
                    [-0.5],
                    [100.0],
                ],
            ),
            [1.0, 0.2, 0.3, 0.4, 0.1, 0.5, 0.9, 0.5, 0.0, 0.0],
        ),
        ([0.2, 0.3, 0.4, 0.1], [-0.1, 0.0, 0.25, 0.33], ([-0.1], [0.33]), 1.0),
        ([0.2, 0.3, 0.4, 0.1], [-0.1, 0.0, 0.25, 0.33], ([-0.1], [-0.1]), 0.2),
        ([0.2, 0.3, 0.4, 0.1], [-0.1, 0.0, 0.25, 0.33], ([0.0], [0.0]), 0.3),
        ([0.2, 0.3, 0.4, 0.1], [-0.1, 0.0, 0.25, 0.33], ([0.25], [0.25]), 0.4),
        ([0.2, 0.3, 0.4, 0.1], [-0.1, 0.0, 0.25, 0.33], ([0.33], [0.33]), 0.1),
        ([0.2, 0.3, 0.4, 0.1], [-0.1, 0.0, 0.25, 0.33], ([-0.1], [0.0]), 0.5),
        ([0.2, 0.3, 0.4, 0.1], [-0.1, 0.0, 0.25, 0.33], ([-0.1], [0.25]), 0.9),
        ([0.2, 0.3, 0.4, 0.1], [-0.1, 0.0, 0.25, 0.33], ([0.0], [1.0]), 0.8),
        ([0.2, 0.3, 0.4, 0.1], [-0.1, 0.0, 0.25, 0.33], ([-1.0], [-0.5]), 0.0),
        ([0.2, 0.3, 0.4, 0.1], [-0.1, 0.0, 0.25, 0.33], ([1.0], [100.0]), 0.0),
        (
            [0.2, 0.3, 0.4, 0.1],
            [-0.1, 0.0, 0.25, 0.33],
            (
                [
                    [-0.1],
                    [-0.1],
                    [0.0],
                    [0.25],
                    [0.33],
                    [-0.1],
                    [-0.1],
                    [0.0],
                    [-1.0],
                    [1.0],
                ],
                [
                    [0.33],
                    [-0.1],
                    [0.0],
                    [0.25],
                    [0.33],
                    [0.0],
                    [0.25],
                    [1.0],
                    [-0.5],
                    [100.0],
                ],
            ),
            [1.0, 0.2, 0.3, 0.4, 0.1, 0.5, 0.9, 0.8, 0.0, 0.0],
        ),
        ([0.0, 1.0, 0.0, 0.0, 0.0], None, ([0.0], [4.0]), 1.0),
        ([0.0, 1.0, 0.0, 0.0, 0.0], None, ([0.0], [0.0]), 0.0),
        ([0.0, 1.0, 0.0, 0.0, 0.0], None, ([3.0], [3.0]), 0.0),
        ([0.0, 1.0, 0.0, 0.0, 0.0], None, ([0.5], [1.0]), 1.0),
        (
            [0.0, 1.0, 0.0, 0.0, 0.0],
            None,
            ([[0.0], [0.0], [3.0], [0.5]], [[4.0], [0.0], [3.0], [1.0]]),
            [1.0, 0.0, 0.0, 1.0],
        ),
        ([0.0, 1.0, 0.0, 0.0, 0.0], [0.0, -12.0, 0.1, 0.79], ([0.0], [4.0]), 0.0),
        ([0.0, 1.0, 0.0, 0.0, 0.0], [0.0, -12.0, 0.1, 0.79], ([-100.0], [0.0]), 1.0),
        ([0.0, 1.0, 0.0, 0.0, 0.0], [0.0, -12.0, 0.1, 0.79], ([-100.0], [1.0]), 1.0),
        ([1 / 3, 0.0, 2 / 3], None, ([0.0], [2.0]), 1.0),
        ([1 / 3, 0.0, 2 / 3], None, ([-1.0], [4.0]), 1.0),
        ([1 / 3, 0.0, 2 / 3], None, ([0.25], [1.99999]), 0.0),
        ([1 / 3, 0.0, 2 / 3], None, ([1.001], [1000.5]), 2 / 3),
        ([1 / 3, 0.0, 2 / 3], None, ([0.001], [1000.5]), 2 / 3),
        ([1 / 3, 0.0, 2 / 3], None, ([0.0], [1.0]), 1 / 3),
        ([1 / 3, 0.0, 2 / 3], None, ([-1e12], [0.0001]), 1 / 3),
        (
            [1 / 3, 0.0, 2 / 3],
            None,
            (
                [[0.0], [-1.0], [0.25], [1.001], [0.001], [0.0], [-1e12]],
                [[2.0], [4.0], [1.99999], [1000.5], [1000.5], [1.0], [0.0001]],
            ),
            [1.0, 1.0, 0.0, 2 / 3, 2 / 3, 1 / 3, 1 / 3],
        ),
    ),
)
def test_probability(probs, values, event, expected_probability):
    distribution = Categorical(probs, values)
    dtype = distribution.dtype
    event = torch.tensor(event[0], dtype=dtype), torch.tensor(event[1], dtype=dtype)
    expected_probability = torch.tensor(expected_probability, dtype=dtype)
    assert torch.allclose(distribution.probability(event), expected_probability)


@pytest.mark.parametrize(
    "probs",
    ([0.5, 0.5], [0.2, 0.3, 0.4, 0.1], [0.1] * 10, [1.0], [0.01, 0.99]),
)
def test_sample(probs):
    probs = torch.as_tensor(probs)
    distribution = Categorical(probs)
    n = int(1e6)
    x = distribution.sample(num_samples=n, seed=221344659877108)
    assert torch.all(x >= 0)
    assert torch.all(x < len(probs))
    frequencies = torch.bincount(x) / n
    print(probs, frequencies)
    assert torch.allclose(frequencies, probs, atol=0.01)


if __name__ == "__main__":
    pytest.main()
